// This file is safe to edit. Once it exists it will not be overwritten

{{ if .Copyright -}}// {{ comment .Copyright -}}{{ end }}


package {{ .APIPackage }}

import (
  "context"
  "crypto/tls"
  "io"
  "net/http"
  "fmt"

  "github.com/go-openapi/errors"
  "github.com/go-openapi/runtime"
  "github.com/go-openapi/runtime/middleware"
  "github.com/go-openapi/runtime/security"
  "github.com/prometheus/client_golang/prometheus"
  "github.com/prometheus/client_golang/prometheus/promhttp"
  "github.com/vrischmann/envconfig"

  "github.com/dedovvlad/{{ dasherize .Name }}/internal/app"
  "github.com/dedovvlad/{{ dasherize .Name }}/internal/generated/restapi/healthcheck"
  {{ imports .DefaultImports }}
  {{ imports .Imports }}
)

{{ with .GenOpts }}
//go:generate swagger generate server --target {{ .TargetPath }} --name {{ .Name }} --spec {{ .SpecPath }}
{{- if .APIPackage }}{{ if ne .APIPackage "operations" }} --api-package {{ .APIPackage }}{{ end }}{{ end }}
{{- if .ModelPackage }}{{ if ne .ModelPackage "models" }} --model-package {{ .ModelPackage }}{{ end }}{{ end }}
{{- if .ServerPackage }}{{ if ne .ServerPackage "restapi"}} --server-package {{ .ServerPackage }}{{ end }}{{ end }}
{{- if .ClientPackage }}{{ if ne .ClientPackage "client" }} --client-package {{ .ClientPackage }}{{ end }}{{ end }}
{{- if .TemplateDir }} --template-dir {{ .TemplateDir }}{{ end }}
{{- range .Operations }} --operation {{ . }}{{ end }}
{{- range .Tags }} --tags {{ . }}{{ end }}
{{- if .Principal }} --principal {{ .Principal }}{{ end }}
{{- if .DefaultScheme }}{{ if ne .DefaultScheme "http" }} --default-scheme {{ .DefaultScheme }}{{ end }}{{ end }}
{{- range .Models }} --model {{ . }}{{ end }}
{{- if or (not .IncludeModel) (not .IncludeValidator) }} --skip-models{{ end }}
{{- if or (not .IncludeHandler) (not .IncludeParameters ) (not .IncludeResponses) }} --skip-operations{{ end }}
{{- if not .IncludeSupport }} --skip-support{{ end }}
{{- if not .IncludeMain }} --exclude-main{{ end }}
{{- if .ExcludeSpec }} --exclude-spec{{ end }}
{{- if .DumpData }} --dump-data{{ end }}
{{- if .StrictResponders }} --strict-responders{{ end }}
{{ end }}
func configureFlags(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API) {
  // api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *{{.APIPackageAlias}}.{{ pascalize .Name }}API) http.Handler {
  // configure the api here
  api.ServeError = errors.ServeError
  metrics := prometheus.NewRegistry()
  initMetrics(metrics)
  srv := app.New(metrics)

  api.ServerShutdown = srv.OnShutdown
  type servMiddleware interface {
      Middleware(next http.Handler) http.Handler
  }
  if impl, ok := (interface{}(srv)).(servMiddleware); ok {
      api.Middleware = func(builder middleware.Builder) http.Handler {
          apiHandler := api.Context().RoutesHandler(builder)
          return impl.Middleware(apiHandler)
      }
  }

  // Set your custom logger if needed. Default one is log.Printf
  // Expected interface func(string, ...interface{})
  //
  // Example:
  // api.Logger = log.Printf

  api.UseSwaggerUI()
  // To continue using redoc as your UI, uncomment the following line
  // api.UseRedoc()

  {{ range .Consumes }}
    {{- if .Implementation }}
  api.{{ pascalize .Name }}Consumer = {{ .Implementation }}
    {{- else }}
  api.{{ pascalize .Name }}Consumer = runtime.ConsumerFunc(func(r io.Reader, target interface{}) error {
    return errors.NotImplemented("{{.Name}} consumer has not yet been implemented")
  })
    {{- end }}
  {{- end }}
  {{ range .Produces }}
    {{- if .Implementation }}
  api.{{ pascalize .Name }}Producer = {{ .Implementation }}
    {{- else }}
  api.{{ pascalize .Name }}Producer = runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
    return errors.NotImplemented("{{.Name}} producer has not yet been implemented")
  })
    {{- end }}
  {{- end}}
  {{ range .SecurityDefinitions }}
    {{- if .IsBasicAuth }}
  // Applies when the Authorization header is set with the Basic scheme
  if api.{{ pascalize .ID }}Auth == nil {
  api.{{ pascalize .ID }}Auth = func(user string, pass string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
      return nil, errors.NotImplemented("basic auth  ({{ .ID }}) has not yet been implemented")
    }
  }
    {{- else if .IsAPIKeyAuth }}
  // Applies when the "{{ .Name }}" {{ .Source }} is set
  if api.{{ pascalize .ID }}Auth == nil {
  api.{{ pascalize .ID }}Auth = func(token string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
      return nil, errors.NotImplemented("api key auth ({{ .ID }}) {{.Name}} from {{.Source}} param [{{ .Name }}] has not yet been implemented")
    }
  }
    {{- else if .IsOAuth2 }}
    if api.{{ pascalize .ID }}Auth == nil {
    api.{{ pascalize .ID }}Auth = func(token string, scopes []string) ({{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}, error) {
      return nil, errors.NotImplemented("oauth2 bearer auth ({{ .ID }}) has not yet been implemented")
    }
  }
    {{- end }}
  {{- end }}
  {{- if .SecurityDefinitions }}

  // Set your custom authorizer if needed. Default one is security.Authorized()
  // Expected interface runtime.Authorizer
  //
  // Example:
  // api.APIAuthorizer = security.Authorized()
  {{- end }}
  {{- $package := .Package }}
  {{- $apipackagealias := .APIPackageAlias }}
  {{- range .Operations }}
    {{- if .HasFormParams }}
  // You may change here the memory limit for this multipart form parser. Below is the default (32 MB).
  // {{ if ne .Package $package }}{{ .PackageAlias }}{{ else }}{{ $apipackagealias }}{{ end }}.{{ pascalize .Name }}MaxParseMemory = 32 << 20
    {{- end }}
  {{- end }}
  {{ range .Operations }}
  if api.{{ if ne .Package $package }}{{ pascalize .Package }}{{ end }}{{ pascalize .Name }}Handler == nil {
    api.{{ if ne .Package $package }}{{pascalize .Package}}{{ end }}{{ pascalize .Name }}Handler =
    {{- if ne .Package $package }}
      {{- .PackageAlias }}.{{- pascalize .Name }}HandlerFunc(func(params {{ .PackageAlias }}.{{- pascalize .Name }}Params
    {{- else }}
      {{- $apipackagealias }}.{{- pascalize .Name }}HandlerFunc(func(params {{ $apipackagealias }}.{{- pascalize .Name }}Params
    {{- end }}
  {{- if $.GenOpts.StrictResponders }}
    {{- if .Authorized}}, principal {{ if .PrincipalIsNullable }}*{{ end }}{{.Principal}}{{end}}) {{.Package}}.{{ pascalize .Name }}Responder {
     return {{.Package}}.{{ pascalize .Name }}NotImplemented()
  {{ else }}
    {{- if .Authorized}}, principal {{if .PrincipalIsNullable }}*{{ end }}{{.Principal}}{{end}}) middleware.Responder {
      return middleware.NotImplemented("operation {{ .Package}}.{{pascalize .Name}} has not yet been implemented")
  {{ end -}}
    })
  }
  {{- end }}

  api.PreServerShutdown = func() {  }

  srv.SetupSwaggerHandlers(api)
  if err := srv.ConfigureService(); err != nil {
      panic(err)
  }
  return setupCustomRoutes(
            srv,
            setupGlobalMiddleware(
              metricsMiddleware(
                  api.Context(),
                  recoverMiddleware(
                      api.Serve(setupMiddlewares),
                  ),
              ),
            ),
    )
  }

type ResponseWriterWithHTTPCode struct {
	wrapped http.ResponseWriter
	Code    int
}

func NewResponseWriterWithHTTPCode(wrapped http.ResponseWriter) *ResponseWriterWithHTTPCode {
	return &ResponseWriterWithHTTPCode{wrapped: wrapped}
}

func (rw *ResponseWriterWithHTTPCode) Header() http.Header {
	return rw.wrapped.Header()
}

func (rw *ResponseWriterWithHTTPCode) Write(content []byte) (int, error) {
	return rw.wrapped.Write(content)
}

func (rw *ResponseWriterWithHTTPCode) WriteHeader(statusCode int) {
	rw.Code = statusCode
	rw.wrapped.WriteHeader(statusCode)
}

func metricsMiddleware(ctx *middleware.Context, next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// собираем данные об http вызове - время выполнения, хендлер, код ответа и метод запроса
		ts := time.Now()
		var handlerName string
		respWriter := NewResponseWriterWithHTTPCode(w)
		route, _, exists := ctx.RouteInfo(r)

		defer func() {
            if exists && route != nil && route.Operation != nil {
                handlerName = route.Operation.ID
            } else {
                handlerName = formatHandlerName(r)
            }

            statReqDurations.With(prometheus.Labels{"handler": handlerName}).Observe(time.Since(ts).Seconds())
            statReqCount.With(prometheus.Labels{
                "code":    strconv.Itoa(respWriter.Code),
                "method":  r.Method,
                "handler": handlerName,
            }).Inc()
        }()

		next.ServeHTTP(respWriter, r)
	})
}

func formatHandlerName(r *http.Request) string {
	parts := strings.Split(r.RequestURI, "/")
	for i, p := range parts {
		if len(p) < 6 {
			continue
		}
		for j, ch := range p {
			if ch >= '0' && ch <= '9' {
				parts[i] = "{param}"
				break
			}
			if ch == '?' {
				parts[i] = p[:j]
				break
			}
		}
	}

	return r.Method + " " + strings.Join(parts, "/")
}

// setupCustomRoutes creates http handler to serve custom routes
func setupCustomRoutes(srv *app.Service, next http.Handler) http.Handler {
	host, _ := os.Hostname()
	hCheck := &healthcheck.Healthcheck{
		AppName:    version.SERVICE_NAME,
		Version:    version.VERSION,
		ServerName: host,
	}
	for _, checkerFunc := range srv.HealthCheckers() {
		hCheck.AddChecker(checkerFunc)
	}

	mux := http.NewServeMux()
	mux.Handle("/", next)
	mux.Handle("/health/check", healthcheck.Handler(hCheck))
	mux.Handle("/metrics", promhttp.HandlerFor(srv.Metrics(), promhttp.HandlerOpts{}))

	cfg := struct{ PprofEnabled bool }{}
	envconfig.InitWithPrefix(&cfg, version.SERVICE_NAME)

	if cfg.PprofEnabled {
		mux.HandleFunc("/debug/pprof/", pprof.Index)
		mux.HandleFunc("/debug/pprof/cmdline", pprof.Cmdline)
		mux.HandleFunc("/debug/pprof/profile", pprof.Profile)
		mux.HandleFunc("/debug/pprof/symbol", pprof.Symbol)
		mux.HandleFunc("/debug/pprof/trace", pprof.Trace)
	}

	mux.HandleFunc("/version", versionHandler)
	startTime = time.Now()
	return mux
}

var startTime time.Time

const infoTpl = `{"app": %q, "version": %q, "buildTime": %q, "upTime": %.6q}`

func versionHandler(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, infoTpl, version.SERVICE_NAME, version.VERSION, version.BUILD_TIME, time.Since(startTime))
}

var (
    statReqCount *prometheus.CounterVec
    statReqDurations *prometheus.HistogramVec
)

func initMetrics(metrics *prometheus.Registry) {
	metrics.MustRegister(prometheus.NewGoCollector())
	metrics.MustRegister(prometheus.NewProcessCollector(prometheus.ProcessCollectorOpts{
		PidFn:     nil,
		Namespace: version.SERVICE_NAME,
	}))

	statReqCount = prometheus.NewCounterVec(prometheus.CounterOpts{
		Namespace: version.SERVICE_NAME,
		Name:      "rest_requests_total",
		Help:      "Total number of rest requests",
	}, []string{"method", "code", "handler"})

	statReqDurations = prometheus.NewHistogramVec(prometheus.HistogramOpts{
		Namespace: version.SERVICE_NAME,
		Name:      "rest_request_duration_seconds",
		Help:      "Rest request duration",
		Buckets:   []float64{0.005, 0.01, 0.05, 0.1, 0.5, 1, 5},
	}, []string{"handler"})

	metrics.MustRegister(statReqCount, statReqDurations)
}

func recoverMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
		defer func() {
			if r := recover(); r != nil {
				w.WriteHeader(http.StatusInternalServerError)
			}
		}()

		next.ServeHTTP(w, req)
	})
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
  // Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix".
func configureServer(s *http.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation.
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics.
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}