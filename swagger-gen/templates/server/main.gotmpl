package main

import (
	"fmt"
	"log"

    	"github.com/go-openapi/loads"

	"github.com/dedovvlad/{{ dasherize .Name }}/internal/generated/restapi"
	"github.com/dedovvlad/{{ dasherize .Name }}/internal/generated/restapi/operations"
	"github.com/dedovvlad/{{ dasherize .Name }}/version"
	"github.com/dedovvlad/{{ dasherize .Name }}/internal/config"
	
	_ "github.com/lib/pq"
)

func main() {
    defer func() {
		if err := recover(); err != nil {
			fmt.Printf("catch err: %s", err)
		}
	}()

    cfg, err := config.InitConfig(version.SERVICE_NAME)
    if err != nil {
        panic(err)
    }

	swaggerSpec, err := loads.Analyzed({{ .APIPackage }}.SwaggerJSON, "")
	if err != nil {
		panic(err)
	}

	api := {{ .Package }}.New{{ pascalize .Name }}API(swaggerSpec)
	server := {{ .APIPackage }}.NewServer(api)

	//nolint: errcheck
    defer server.Shutdown()

	server.ConfigureAPI()

	server.Port = cfg.HTTPBindPort
    server.GracefulTimeout = cfg.GracefulTimeout
    if err := server.Serve(); err != nil {
        panic(err)
    }
}
