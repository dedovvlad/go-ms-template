// Code generated by go-swagger; DO NOT EDIT.

package test

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"log"
	"net/url"

	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new test API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for test API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Test(params *TestParams, opts ...ClientOption) (*TestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

// forURL возвращает транспорт, смотрящий на baseURL в качестве корня API.
func forURL(baseURL string) (*cr.Runtime, error) {
	u, err := url.Parse(baseURL)
	if err != nil {
		return nil, err
	}
	return cr.New(u.Host, u.Path, []string{u.Scheme}), nil
}

/*
Test test API
*/
func (a *Client) Test(params *TestParams, opts ...ClientOption) (*TestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Test",
		Method:             "GET",
		PathPattern:        "/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &TestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}
	transport := a.transport
	if params.MeshURL != "" {
		curTransport, err := forURL(params.MeshURL)
		if err != nil {
			log.Printf("%v is not valid mesh url", params.MeshURL)
		} else {
			transport = curTransport
		}
	}

	result, err := transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Test: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
